---
# This file is part of the NiAS project (https://github.com/nias-project).
# Copyright NiAS developers and contributors. All rights reserved.
# License: BSD 2-Clause License (https://opensource.org/licenses/BSD-2-Clause)
name: Downstream inclusion

on:
  pull_request:
    # defaults + "ready_for_review" (so full matrix is run when that's toggled)
    types: [opened, synchronize, reopened, ready_for_review]

concurrency:
  group: downstream_inclusion_${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.13'

jobs:
  inclusion_as_submodule:
    strategy:
      fail-fast: false
    name: as submodule
    runs-on: ubuntu-24.04
    defaults:
      run:
        shell: bash -elo pipefail {0}
    timeout-minutes: 30
    env:
      TEST_PROJECT_DIR: submodule_test_project
    steps:

    - name: Setup Python
      uses: actions/setup-python@v5
      id: setup_python
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Setup uv
      uses: astral-sh/setup-uv@v5

    - name: Checkout nias-cpp
      uses: actions/checkout@v4
      with:
        path: nias-cpp

    - name: Create test project
      run: |
        mkdir "${TEST_PROJECT_DIR}"
        cp nias-cpp/.test_projects/main.cpp "${TEST_PROJECT_DIR}/"
        cp nias-cpp/tests/test_vector.h "${TEST_PROJECT_DIR}/"
        cp nias-cpp/.test_projects/CMakeLists.txt.Submodule "${TEST_PROJECT_DIR}/CMakeLists.txt"

    - name: Checkout nias_cpp as submodule
      uses: actions/checkout@v4
      with:
        path: ${{ env.TEST_PROJECT_DIR }}/nias-cpp

    - name: Configure and build test project
      run: |
        cd "${TEST_PROJECT_DIR}"
        mkdir build
        cmake -B build -DCMAKE_BUILD_TYPE=Debug
        cmake --build build

  inclusion_via_fetchcontent:
    strategy:
      fail-fast: false
    name: using FetchContent
    runs-on: ubuntu-24.04
    defaults:
      run:
        shell: bash -elo pipefail {0}
    timeout-minutes: 30
    env:
      TEST_PROJECT_DIR: fetchcontent_test_project
    steps:

    - name: Setup Python
      uses: actions/setup-python@v5
      id: setup_python
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Setup uv
      uses: astral-sh/setup-uv@v5

    - name: Checkout nias-cpp
      uses: actions/checkout@v4
      with:
        path: nias-cpp

    - name: Create test project
      run: |
        mkdir "${TEST_PROJECT_DIR}"
        cp nias-cpp/.test_projects/main.cpp "${TEST_PROJECT_DIR}/"
        cp nias-cpp/tests/test_vector.h "${TEST_PROJECT_DIR}/"
        cp nias-cpp/.test_projects/CMakeLists.txt.FetchContent "${TEST_PROJECT_DIR}/CMakeLists.txt"
        sed -i 's/<GIT_TAG_PLACEHOLDER>/${{ github.event.pull_request.head.sha }}/' "${TEST_PROJECT_DIR}/CMakeLists.txt"

    - name: Configure and build test project
      run: |
        cd "${TEST_PROJECT_DIR}"
        mkdir build
        cmake -B build -DCMAKE_BUILD_TYPE=Debug
        cmake --build build

  use_from_virtualenv:
    strategy:
      fail-fast: false
    name: from virtualenv
    runs-on: ubuntu-24.04
    defaults:
      run:
        shell: bash -elo pipefail {0}
    timeout-minutes: 30
    env:
      TEST_PROJECT_DIR: virtualenv_test_project
    steps:

    - name: Setup Python
      uses: actions/setup-python@v5
      id: setup_python
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Setup uv
      uses: astral-sh/setup-uv@v5

    - name: Checkout nias-cpp
      uses: actions/checkout@v4
      with:
        path: nias-cpp

    - name: Setup virtualenv
      run: |
        uv venv --python='${{ steps.setup_python.outputs.python-path }}'
        uv pip install ./nias-cpp

    - name: Create test project
      run: |
        mkdir "${TEST_PROJECT_DIR}"
        cp nias-cpp/.test_projects/main.cpp "${TEST_PROJECT_DIR}/"
        cp nias-cpp/tests/test_vector.h "${TEST_PROJECT_DIR}/"
        cp nias-cpp/.test_projects/CMakeLists.txt.VirtualEnv "${TEST_PROJECT_DIR}/CMakeLists.txt"

    - name: Configure and build test project
      run: |
        source .venv/bin/activate
        cd "${TEST_PROJECT_DIR}"
        mkdir build
        cmake -B build -DPython_EXECUTABLE="$(which python${{ env.PYTHON_VERSION }})" -DCMAKE_BUILD_TYPE=Debug
        cmake --build build
